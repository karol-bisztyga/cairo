//! > Test expansion of a simple starknet contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}

    #[l1_handler]
    fn good_l1_handler(ref self: Storage, from_address: felt252, arg: felt252) {}

    #[l1_handler]
    fn good_l1_handler_ignored(ref self: Storage, _from_address: felt252, arg: felt252) {}

    #[l1_handler]
    fn l1_handler_no_params(ref self: Storage) {}

    #[l1_handler]
    fn l1_handler_wrong_first_param_name(ref self: Storage, abc: felt252) {}

    #[l1_handler]
    fn l1_handler_wrong_first_param_type(ref self: Storage, from_address: u128) {}
}

//! > generated_cairo_code

//! > expected_diagnostics
error: Plugin diagnostic: An L1 handler must have the 'from_address' parameter.
 --> lib.cairo:13:29
    fn l1_handler_no_params(ref self: Storage) {}
                            ^***************^

error: Plugin diagnostic: The second parameter of an L1 handler must be named 'from_address'.
 --> lib.cairo:16:61
    fn l1_handler_wrong_first_param_name(ref self: Storage, abc: felt252) {}
                                                            ^**********^

error: Plugin diagnostic: The second parameter of an L1 handler must be of type `felt252`.
 --> lib.cairo:19:61
    fn l1_handler_wrong_first_param_type(ref self: Storage, from_address: u128) {}
                                                            ^****************^

error: Type not found.
 --> contract:14:55
    impl StorageEventEmitter of EventEmitter<Storage, Event> {
                                                      ^***^

error: Type not found.
 --> contract:15:44
        fn emit(ref self: Storage, event: @Event) {
                                           ^***^

error: Trait has no implementation in context: core::starknet::event::Event::<<missing>>
 --> contract:18:30
            starknet::Event::append_keys_and_values(event, ref keys, ref values);
                             ^********************^
