//! > Test expansion of Starknet for user types.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {
        var: WrappedFelt252,
        mapping: LegacyMap::<WrappedFelt252, WrappedFelt252>,
    }
    #[derive(Drop)]
    struct WrappedFelt252 {
        value: felt252,
    }
    use array::ArrayTrait;
    use array::SpanTrait;
    impl WrappedFelt252Serde of serde::Serde::<WrappedFelt252> {
        fn serialize(self: @WrappedFelt252, ref output: Array::<felt252>) {
            output.append(*self.value);
        }
        fn deserialize(ref serialized: Span::<felt252>) -> Option::<WrappedFelt252> {
            Option::<WrappedFelt252>::Some(WrappedFelt252 { value: *serialized.pop_front()? })
        }
    }
    impl WrappedFelt252StorageAccess of starknet::StorageAccess::<WrappedFelt252> {
        fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult::<WrappedFelt252> {
            starknet::SyscallResult::<WrappedFelt252>::Ok(WrappedFelt252 {
                value: starknet::StorageAccess::read(address_domain, base)?
            })
        }
        #[inline(always)]
        fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: WrappedFelt252) -> starknet::SyscallResult::<()> {
            starknet::StorageAccess::write(address_domain, base, value.value)
        }
    }
    impl WrappedFelt252LegacyHash of hash::LegacyHash::<WrappedFelt252> {
        #[inline(always)]
        fn hash(state: felt252, value: WrappedFelt252) -> felt252 {
            hash::LegacyHash::hash(state, value.value)
        }
    }
}

//! > generated_cairo_code

//! > expected_diagnostics
error: Type not found.
 --> contract:18:55
    impl StorageEventEmitter of EventEmitter<Storage, Event> {
                                                      ^***^

error: Type not found.
 --> contract:19:44
        fn emit(ref self: Storage, event: @Event) {
                                           ^***^

error: Trait has no implementation in context: core::starknet::event::Event::<<missing>>
 --> contract:22:30
            starknet::Event::append_keys_and_values(event, ref keys, ref values);
                             ^********************^
