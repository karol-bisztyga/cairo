//! > Test expansion of a simple starknet contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    use array::ArrayTrait;

    #[starknet::storage]
    struct Storage {}

    #[external]
    #[raw_output]
    fn test_raw_output(ref self: Storage) -> Span::<felt252> {
        ArrayTrait::new().span()
    }

    #[external]
    #[raw_output]
    fn test_raw_output_with_spaces(ref self: Storage) -> Span     ::   < felt252  > {
        ArrayTrait::new().span()
    }
}

//! > generated_cairo_code

//! > expected_diagnostics
error: Type not found.
 --> contract:14:55
    impl StorageEventEmitter of EventEmitter<Storage, Event> {
                                                      ^***^

error: Type not found.
 --> contract:15:44
        fn emit(ref self: Storage, event: @Event) {
                                           ^***^

error: Trait has no implementation in context: core::starknet::event::Event::<<missing>>
 --> contract:18:30
            starknet::Event::append_keys_and_values(event, ref keys, ref values);
                             ^********************^
