//! > Test diagnostics from invalid contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract;

//! > generated_cairo_code

//! > expected_diagnostics
error: Plugin diagnostic: Contracts without body are not supported.
 --> lib.cairo:1:1
#[contract]
^*********^

error: Module file not found. Expected path: src/TestContract.cairo
 --> lib.cairo:1:1
#[contract]
^*********^

//! > ==========================================================================

//! > Test diagnostics non legacy storage variable.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {
        mapping: Map::<felt252, felt252>,
    }
}

//! > generated_cairo_code

//! > expected_diagnostics
error: Plugin diagnostic: Non `LegacyMap` mapping is not yet supported.
 --> lib.cairo:5:18
        mapping: Map::<felt252, felt252>,
                 ^*********************^

error: Plugin diagnostic: Identifier not found.
 --> lib.cairo:5:9
        mapping: Map::<felt252, felt252>,
        ^*****^

error: Plugin diagnostic: Identifier not found.
 --> lib.cairo:5:9
        mapping: Map::<felt252, felt252>,
        ^*****^

error: Invalid copy trait implementation, Trait `core::traits::Copy::<<missing>>` has multiple implementations, in: "test::TestContract::StorageCopy", "core::traits::SnapshotCopy", "core::traits::TupleSize0Copy", "core::traits::TupleSize1Copy", "core::traits::TupleSize2Copy", "core::traits::TupleSize3Copy", "core::traits::TupleSize4Copy", "core::boolCopy", "core::felt252Copy"
 --> impls:1:1
impl StorageCopy<> of Copy::<Storage<>>;
^**************************************^

error: Invalid drop trait implementation, Trait `core::traits::Drop::<<missing>>` has multiple implementations, in: "test::TestContract::StorageDrop", "core::traits::SnapshotDrop", "core::traits::TupleSize0Drop", "core::traits::TupleSize1Drop", "core::traits::TupleSize2Drop", "core::traits::TupleSize3Drop", "core::traits::TupleSize4Drop", "core::boolDrop", "core::felt252Drop"
 --> impls:2:1
impl StorageDrop<> of Drop::<Storage<>>;
^**************************************^

//! > ==========================================================================

//! > Test diagnostics of non-serializable parameter in entry point.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[external]
    fn foo(ref self: Storage, x: (felt252, felt252)) {
    }
}

//! > generated_cairo_code

//! > expected_diagnostics

//! > ==========================================================================

//! > Test diagnostics of non-serializable return type in entry point.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[external]
    fn foo(ref self: Storage) -> (felt252, felt252) {
    }
}

//! > generated_cairo_code

//! > expected_diagnostics
error: Unexpected return type. Expected: "(core::felt252, core::felt252)", found: "()".
 --> lib.cairo:6:53
    fn foo(ref self: Storage) -> (felt252, felt252) {
                                                    ^

//! > ==========================================================================

//! > Test diagnostics of generic entry point.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[external]
    fn foo<T>(ref self: Storage, x: T) {
    }
}

//! > generated_cairo_code

//! > expected_diagnostics
error: Plugin diagnostic: Contract entry points cannot have generic arguments
 --> lib.cairo:6:11
    fn foo<T>(ref self: Storage, x: T) {
          ^*^

error: Variable not dropped. Trait has no implementation in context: core::traits::Drop::<GenericParamType(test::TestContract::foo::T)>. Trait has no implementation in context: core::traits::Destruct::<GenericParamType(test::TestContract::foo::T)>.
 --> lib.cairo:6:34
    fn foo<T>(ref self: Storage, x: T) {
                                 ^

error: Type not found.
 --> contract:37:32
                serde::Serde::<T>::deserialize(ref data).expect('Input too short for arguments');
                               ^

error: Plugin diagnostic: Type annotations needed. Failed to infer ?14
 --> lib.cairo:6:8
    fn foo<T>(ref self: Storage, x: T) {
       ^*^

//! > ==========================================================================

//! > Test multiple diagnostics from entry point.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[external]
    fn foo(ref self: Storage, x: (felt252, felt252), y: (felt252, felt252)) -> (felt252, felt252) {
    }
}

//! > generated_cairo_code

//! > expected_diagnostics
error: Unexpected return type. Expected: "(core::felt252, core::felt252)", found: "()".
 --> lib.cairo:6:99
    fn foo(ref self: Storage, x: (felt252, felt252), y: (felt252, felt252)) -> (felt252, felt252) {
                                                                                                  ^

//! > ==========================================================================

//! > Test diagnostics from event with nonempty body.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[event]
    fn nonempty_body() {
        let x = 1;
    }
}

//! > generated_cairo_code

//! > expected_diagnostics
error: Plugin diagnostic: Event function body must be empty.
 --> lib.cairo:7:9
        let x = 1;
        ^********^

//! > ==========================================================================

//! > Test diagnostics from event with ref params.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[event]
    fn with_ref_param(ref x: felt252, y: u128) {
    }
}

//! > generated_cairo_code

//! > expected_diagnostics
error: Plugin diagnostic: `ref` parameters are not supported in contract events.
 --> lib.cairo:6:23
    fn with_ref_param(ref x: felt252, y: u128) {
                      ^*^

//! > ==========================================================================

//! > Test diagnostics from event with non-unit return type.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[event]
    fn nonunit_ret_type() -> felt252 {
    }
}

//! > generated_cairo_code

//! > expected_diagnostics
error: Plugin diagnostic: Event functions must not return a value.
 --> lib.cairo:6:27
    fn nonunit_ret_type() -> felt252 {
                          ^********^

//! > ==========================================================================

//! > Test diagnostics from event with a non-serializable type.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[event]
    fn generic_event<T>(x: T) {
    }
}

//! > generated_cairo_code

//! > expected_diagnostics
error: Plugin diagnostic: Event functions cannot have generic arguments
 --> lib.cairo:6:21
    fn generic_event<T>(x: T) {
                    ^*^

//! > ==========================================================================

//! > Test multiple diagnostics from event.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[event]
    fn bad_event(ref x: felt252, ref y: felt252, z: (felt252, felt252)) -> felt252 {
        3
    }
}

//! > generated_cairo_code

//! > expected_diagnostics
error: Plugin diagnostic: Event functions must not return a value.
 --> lib.cairo:6:73
    fn bad_event(ref x: felt252, ref y: felt252, z: (felt252, felt252)) -> felt252 {
                                                                        ^********^

error: Plugin diagnostic: `ref` parameters are not supported in contract events.
 --> lib.cairo:6:18
    fn bad_event(ref x: felt252, ref y: felt252, z: (felt252, felt252)) -> felt252 {
                 ^*^

error: Plugin diagnostic: `ref` parameters are not supported in contract events.
 --> lib.cairo:6:34
    fn bad_event(ref x: felt252, ref y: felt252, z: (felt252, felt252)) -> felt252 {
                                 ^*^

error: Plugin diagnostic: Event function body must be empty.
 --> lib.cairo:7:9
        3
        ^

//! > ==========================================================================

//! > Test account contract_entry point on a non-account contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}
    #[external]
    fn __validate__(ref self: Storage) {}
    #[external]
    fn __validate_declare__(ref self: Storage) {}
    #[external]
    fn __validate_deploy__(ref self: Storage) {}
    #[external]
    fn __execute__(ref self: Storage) {}
}

//! > generated_cairo_code

//! > expected_diagnostics
error: Plugin diagnostic: Only an account contract may implement `__validate__`.
 --> lib.cairo:6:8
    fn __validate__(ref self: Storage) {}
       ^**********^

error: Plugin diagnostic: Only an account contract may implement `__validate_declare__`.
 --> lib.cairo:8:8
    fn __validate_declare__(ref self: Storage) {}
       ^******************^

error: Plugin diagnostic: Only an account contract may implement `__validate_deploy__`.
 --> lib.cairo:10:8
    fn __validate_deploy__(ref self: Storage) {}
       ^*****************^

error: Plugin diagnostic: Only an account contract may implement `__execute__`.
 --> lib.cairo:12:8
    fn __execute__(ref self: Storage) {}
       ^*********^

//! > ==========================================================================

//! > Test raw_outputs diagnostics.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {}

    #[external]
    #[raw_output]
    fn foo(ref self: Storage, ref a: felt252, ref b: felt252) {}

    #[external]
    #[raw_output]
    fn bar1(ref self: Storage, a: felt252) -> felt252 { 0 }

    #[external]
    #[raw_output]
    fn bar2(ref self: Storage, a: felt252) {}

    // Should generate diagnostic as path resolving is not supported.
    #[external]
    #[raw_output]
    fn bar3(ref self: Storage, a: felt252) -> core::Array::<felt252> {
         array::array_new()
    }

    // Should generate diagnostic as alias resolving is not supported.
    type my_felt252_array_type = Array::<felt252>;
    #[external]
    #[raw_output]
    fn bar4(ref self: Storage, a: felt252) -> my_felt252_array_type {
        array::array_new()
    }
}

//! > generated_cairo_code

//! > expected_diagnostics
error: Plugin diagnostic: `raw_output` functions cannot have `ref` parameters.
 --> lib.cairo:8:31
    fn foo(ref self: Storage, ref a: felt252, ref b: felt252) {}
                              ^*^

error: Plugin diagnostic: `raw_output` functions cannot have `ref` parameters.
 --> lib.cairo:8:47
    fn foo(ref self: Storage, ref a: felt252, ref b: felt252) {}
                                              ^*^

error: Plugin diagnostic: `raw_output` functions must return `Span::<felt252>`.
 --> lib.cairo:8:63
    fn foo(ref self: Storage, ref a: felt252, ref b: felt252) {}
                                                              ^

error: Plugin diagnostic: `raw_output` functions must return `Span::<felt252>`.
 --> lib.cairo:12:47
    fn bar1(ref self: Storage, a: felt252) -> felt252 { 0 }
                                              ^*****^

error: Plugin diagnostic: `raw_output` functions must return `Span::<felt252>`.
 --> lib.cairo:16:44
    fn bar2(ref self: Storage, a: felt252) {}
                                           ^

error: Plugin diagnostic: `raw_output` functions must return `Span::<felt252>`.
 --> lib.cairo:21:47
    fn bar3(ref self: Storage, a: felt252) -> core::Array::<felt252> {
                                              ^********************^

error: Plugin diagnostic: `raw_output` functions must return `Span::<felt252>`.
 --> lib.cairo:29:47
    fn bar4(ref self: Storage, a: felt252) -> my_felt252_array_type {
                                              ^*******************^

//! > ==========================================================================

//! > Test reusage of storage var name diagnostics.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {
        same_name: felt252,
    }
    fn same_name() -> felt252 {
        1
    }
}

//! > generated_cairo_code

//! > expected_diagnostics
error: Plugin diagnostic: The name `same_name` is defined multiple times.
 --> lib.cairo:5:9
        same_name: felt252,
        ^*******^

//! > ==========================================================================

//! > Contract with no storage.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    fn same_name() -> felt252 {
        1
    }
}

//! > generated_cairo_code

//! > expected_diagnostics
error: Plugin diagnostic: Contracts must define a 'Storage' struct.
 --> lib.cairo:1:1
#[contract]
^*********^

//! > ==========================================================================

//! > Not annotated storage struct.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    struct Storage {
        same_name: felt252,
    }
    fn same_name() -> felt252 {
        1
    }
}

//! > generated_cairo_code

//! > expected_diagnostics
error: Plugin diagnostic: 'Storage' struct must be annotated with #[starknet::storage].
 --> lib.cairo:1:1
#[contract]
^*********^
