//! > Test expansion of a simple starknet contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    use starknet::class_hash::ClassHash;
    use starknet::contract_address::ContractAddress;
    use starknet::storage_access::StorageAddress;

    #[starknet::storage]
    struct Storage {}

    fn internal_func() -> felt252 {
        1
    }

    #[view]
    fn get_something(self: @Storage, ref arg: felt252, mut num: felt252) -> felt252 {
        num += 1;
        num
    }

    #[external]
    fn set_something(ref self: Storage, ref arg: felt252, num: felt252) {}

    #[l1_handler]
    fn l1_handler_func(ref self: Storage, from_address: felt252, arg: felt252, num: felt252) {}

    #[derive(Drop, starknet::Event)]
    enum Event {
        AwesomeEvent: AwesomeEvent,
        BestEventEver: BestEventEver,
    }
    #[derive(Drop, starknet::Event)]
    struct AwesomeEvent {
        x: felt252,
        data: Array::<felt252>,
    }
    #[derive(Drop, starknet::Event)]
    struct BestEventEver {}

    #[external]
    fn test_serde(
        ref self: Storage,
        contract_address: ContractAddress,
        class_hash: ClassHash,
        storage_address: StorageAddress,
    ) {}
}

//! > generated_cairo_code

//! > expected_diagnostics
error: Trait has no implementation in context: core::serde::Serde::<test::TestContract::AwesomeEvent>
 --> event_impl:8:31
                serde::Serde::serialize(val, ref values);
                              ^*******^

error: Trait has no implementation in context: core::serde::Serde::<test::TestContract::AwesomeEvent>
 --> event_impl:22:41
                let val = serde::Serde::deserialize(
                                        ^*********^
